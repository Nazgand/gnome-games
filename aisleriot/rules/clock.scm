(define (new-game)
  (initialize-playing-area)
  (make-standard-deck)
  (shuffle-deck)

  (add-blank-slot)
  (add-extended-slot '() right)
  (add-blank-slot)
  (add-extended-slot '() right)
  (add-blank-slot)
  (add-extended-slot '() right)
  (add-carriage-return-slot)
  
  (add-extended-slot '() right)
  (add-blank-slot)
  (add-blank-slot)
  (add-blank-slot)
  (add-blank-slot)
  (add-blank-slot)
  (add-extended-slot '() right)
  (add-carriage-return-slot)

  (add-extended-slot '() right)
  (add-blank-slot)
  (add-blank-slot)
  (add-extended-slot DECK right)
  (add-blank-slot)
  (add-blank-slot)
  (add-extended-slot '() right)
  (add-carriage-return-slot)

  (add-extended-slot '() right)
  (add-blank-slot)
  (add-blank-slot)
  (add-blank-slot)
  (add-blank-slot)
  (add-blank-slot)
  (add-extended-slot '() right)
  (add-carriage-return-slot)

  (add-blank-slot)
  (add-extended-slot '() right)
  (add-blank-slot)
  (add-extended-slot '() right)
  (add-blank-slot)
  (add-extended-slot '() right)

  (deal-cards 6 '(2 4 7 9 12 11 10 8 5 3 0 1 2 4 7 9 12 11 10 8 5 3 0 1 2 4 7 9 12 11 10 8 5 3 0 1 2 4 7 9 12 11 10 8 5 3 0 1 ))

  (flip-top-card 6)

  (list 9 5)
)

(define (button-pressed slot-id card-list)
  (and (= slot-id 6)
       (= (list-length card-list) 1)))

(define (transaction-good? end-slot card-list)
  (or (and (= end-slot 2)
	   (= ace (get-value (car card-list))))
      (and (= end-slot 4)
	   (= 2 (get-value (car card-list))))
      (and (= end-slot 7)
	   (= 3 (get-value (car card-list))))
      (and (= end-slot 9)
	   (= 4 (get-value (car card-list))))
      (and (= end-slot 12)
	   (= 5 (get-value (car card-list))))
      (and (= end-slot 11)
	   (= 6 (get-value (car card-list))))
      (and (= end-slot 10)
	   (= 7 (get-value (car card-list))))
      (and (= end-slot 8)
	   (= 8 (get-value (car card-list))))
      (and (= end-slot 5)
	   (= 9 (get-value (car card-list))))
      (and (= end-slot 3)
	   (= 10 (get-value (car card-list))))
      (and (= end-slot 0)
	   (= jack (get-value (car card-list))))
      (and (= end-slot 1)
	   (= queen (get-value (car card-list))))
      (and (= end-slot 6)
	   (= king (get-value (car card-list))))))

(define (complete-transaction card-list end-slot)
  (add-cards! end-slot card-list)
  (add-card! 6 (car (reverse (get-cards end-slot))))
  (set-cards! end-slot (reverse (cdr (reverse (get-cards end-slot)))))
  (make-visible-top-card 6))

(define (button-released start-slot card-list end-slot)
  (if (transaction-good? end-slot card-list)
      (complete-transaction card-list end-slot)
      #f))


(define (button-clicked slot-id)  
  #f)     

(define (button-double-clicked slot)
  (if (transaction-good? slot (get-cards 6))
      (let ((top-card (get-top-card 6)))
	(set-cards! 6 (cdr (get-cards 6)))
	(complete-transaction (list top-card) slot))
      #f))


(define (game-won ugh)
  (make-visible (car (get-cards 1)))
  (make-visible (cadr (get-cards 1)))
  (make-visible (caddr (get-cards 1)))
  (make-visible (cadddr (get-cards 1)))
  (make-visible (car (get-cards 2)))
  (make-visible (cadr (get-cards 2)))
  (make-visible (caddr (get-cards 2)))
  (make-visible (cadddr (get-cards 2)))
  (make-visible (car (get-cards 4)))
  (make-visible (cadr (get-cards 4)))
  (make-visible (caddr (get-cards 4)))
  (make-visible (cadddr (get-cards 4)))
  (make-visible (car (get-cards 7)))
  (make-visible (cadr (get-cards 7)))
  (make-visible (caddr (get-cards 7)))
  (make-visible (cadddr (get-cards 7)))
  (make-visible (car (get-cards 9)))
  (make-visible (cadr (get-cards 9)))
  (make-visible (caddr (get-cards 9)))
  (make-visible (cadddr (get-cards 9)))
  (make-visible (car (get-cards 12)))
  (make-visible (cadr (get-cards 12)))
  (make-visible (caddr (get-cards 12)))
  (make-visible (cadddr (get-cards 12)))
  (make-visible (car (get-cards 11)))
  (make-visible (cadr (get-cards 11)))
  (make-visible (caddr (get-cards 11)))
  (make-visible (cadddr (get-cards 11)))
  (make-visible (car (get-cards 10)))
  (make-visible (cadr (get-cards 10)))
  (make-visible (caddr (get-cards 10)))
  (make-visible (cadddr (get-cards 10)))
  (make-visible (car (get-cards 8)))
  (make-visible (cadr (get-cards 8)))
  (make-visible (caddr (get-cards 8)))
  (make-visible (cadddr (get-cards 8)))
  (make-visible (car (get-cards 5)))
  (make-visible (cadr (get-cards 5)))
  (make-visible (caddr (get-cards 5)))
  (make-visible (cadddr (get-cards 5)))
  (make-visible (car (get-cards 3)))
  (make-visible (cadr (get-cards 3)))
  (make-visible (caddr (get-cards 3)))
  (make-visible (cadddr (get-cards 3)))
  (make-visible (car (get-cards 0)))
  (make-visible (cadr (get-cards 0)))
  (make-visible (caddr (get-cards 0)))
  (make-visible (cadddr (get-cards 0)))
  (if (and (= (get-value (car (get-cards 2))) 1)
	   (= (get-value (cadr (get-cards 2))) 1)
	   (= (get-value (caddr (get-cards 2))) 1)
	   (= (get-value (cadddr (get-cards 2))) 1)
	   (= (get-value (car (get-cards 4))) 2)
	   (= (get-value (cadr (get-cards 4))) 2)
	   (= (get-value (caddr (get-cards 4))) 2)
	   (= (get-value (cadddr (get-cards 4))) 2)
	   (= (get-value (car (get-cards 7))) 3)
	   (= (get-value (cadr (get-cards 7))) 3)
	   (= (get-value (caddr (get-cards 7))) 3)
	   (= (get-value (cadddr (get-cards 7))) 3)
	   (= (get-value (car (get-cards 9))) 4)
	   (= (get-value (cadr (get-cards 9))) 4)
	   (= (get-value (caddr (get-cards 9))) 4)
	   (= (get-value (cadddr (get-cards 9))) 4)
	   (= (get-value (car (get-cards 12))) 5)
	   (= (get-value (cadr (get-cards 12))) 5)
	   (= (get-value (caddr (get-cards 12))) 5)
	   (= (get-value (cadddr (get-cards 12))) 5)
	   (= (get-value (car (get-cards 11))) 6)
	   (= (get-value (cadr (get-cards 11))) 6)
	   (= (get-value (caddr (get-cards 11))) 6)
	   (= (get-value (cadddr (get-cards 11))) 6)
	   (= (get-value (car (get-cards 10))) 7)
	   (= (get-value (cadr (get-cards 10))) 7)
	   (= (get-value (caddr (get-cards 10))) 7)
	   (= (get-value (cadddr (get-cards 10))) 7)
	   (= (get-value (car (get-cards 8))) 8)
	   (= (get-value (cadr (get-cards 8))) 8)
	   (= (get-value (caddr (get-cards 8))) 8)
	   (= (get-value (cadddr (get-cards 8))) 8)
	   (= (get-value (car (get-cards 5))) 9)
	   (= (get-value (cadr (get-cards 5))) 9)
	   (= (get-value (caddr (get-cards 5))) 9)
	   (= (get-value (cadddr (get-cards 5))) 9)
	   (= (get-value (car (get-cards 3))) 10)
	   (= (get-value (cadr (get-cards 3))) 10)
	   (= (get-value (caddr (get-cards 3))) 10)
	   (= (get-value (cadddr (get-cards 3))) 10)
	   (= (get-value (car (get-cards 0))) 11)
	   (= (get-value (cadr (get-cards 0))) 11)
	   (= (get-value (caddr (get-cards 0))) 11)
	   (= (get-value (cadddr (get-cards 0))) 11)
	   (= (get-value (car (get-cards 1))) 12)
	   (= (get-value (cadr (get-cards 1))) 12)
	   (= (get-value (caddr (get-cards 1))) 12)
	   (= (get-value (cadddr (get-cards 1))) 12)
	   )
      #t
      #f))



(define (game-over ugh)
  (not (and (is-visible? (car (reverse (get-cards 6))))
	    (= (get-value (get-top-card 6)) king))))

(define (get-hint ugh)
#f)


(set-lambda new-game button-pressed button-released button-clicked button-double-clicked game-over game-won get-hint)  
