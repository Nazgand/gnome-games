; Aisleriot - eagle_wing.scm
; Copyright (C) 1998 Rosanna Yuen <rwsy@mit.edu>

(define FLIP-COUNTER 0)
(define BASE-VAL 0)

(define (new-game)
  (initialize-playing-area)
  (set-ace-low)
  (make-standard-deck)
  (shuffle-deck)

  (add-normal-slot DECK)
  (add-normal-slot '())                 ;waste

  (add-blank-slot)
  (add-normal-slot '())
  (add-normal-slot '())
  (add-normal-slot '())
  (add-normal-slot '())

  (add-carriage-return-slot)
  (set! VERTPOS (+ VERTPOS 100))
  (add-extended-slot '() down)          ;tableau (slot 6)
  (set! VERTPOS (- VERTPOS 20))
  (add-extended-slot '() down)          ;tableau (slot 7)
  (set! VERTPOS (- VERTPOS 20))
  (add-extended-slot '() down)          ;tableau (slot 8)
  (set! VERTPOS (+ VERTPOS 20))
  (add-extended-slot '() down)          ;tableau (slot 9)
  (set! VERTPOS (+ VERTPOS 50))
  (add-normal-slot '())                 ;reserve (slot 10)
  (set! VERTPOS (- VERTPOS 50))
  (add-extended-slot '() down)          ;tableau (slot 11)
  (set! VERTPOS (- VERTPOS 20))
  (add-extended-slot '() down)          ;tableau (slot 12)
  (set! VERTPOS (+ VERTPOS 20))
  (add-extended-slot '() down)          ;tableau (slot 13)
  (set! VERTPOS (+ VERTPOS 20))
  (add-extended-slot '() down)          ;tableau (slot 14)

  (deal-cards 0 '(10 10 10 10 10 10 10 10 10 10 10 10 10 6 7 8 9 11 12 13 14 2))

  (flip-top-card 2)
  (flip-top-card 6)
  (flip-top-card 7)
  (flip-top-card 8)
  (flip-top-card 9)
  (flip-top-card 11)
  (flip-top-card 12)
  (flip-top-card 13)
  (flip-top-card 14)

  (add-to-score! 1)

  (set! FLIP-COUNTER 0)
  (set! BASE-VAL (get-value (get-top-card 2)))

  (list 9 3))

(define (button-pressed slot-id card-list)
  (and card-list
       (or (= slot-id 1)
	   (= slot-id 6)
	   (= slot-id 7)
	   (= slot-id 8)
	   (= slot-id 9)
	   (= slot-id 11)
	   (= slot-id 12)
	   (= slot-id 13)
	   (= slot-id 14)
	   (and (= slot-id 10)
		(is-visible? (get-top-card 10))))))

(define (complete-transaction start-slot card-list end-slot)
  (if (or (= end-slot 2)
	  (= end-slot 3)
	  (= end-slot 4)
	  (= end-slot 5))
      (add-to-score! (list-length card-list)))
  (move-n-cards! start-slot end-slot card-list)
  (if (and (not (= start-slot 1))
	   (empty-slot? start-slot)
	   (not (empty-slot? 10)))
      (begin
	(cond ((= start-slot 6)
	       (deal-cards 10 '(6)))
	      ((= start-slot 7)
	       (deal-cards 10 '(7)))
	      ((= start-slot 8)
	       (deal-cards 10 '(8)))
	      ((= start-slot 9)
	       (deal-cards 10 '(9)))
	      ((= start-slot 11)
	       (deal-cards 10 '(11)))
	      ((= start-slot 12)
	       (deal-cards 10 '(12)))
	      ((= start-slot 13)
	       (deal-cards 10 '(13)))
	      ((= start-slot 14)
	       (deal-cards 10 '(14)))
	      (#t #f))
 	(if (not (is-visible? (get-top-card start-slot)))
	    (flip-top-card start-slot)))))

; 	(let ((top-card (remove-card 10)))
; 	  (if (eq? top-card '())
; 	      #f
; 	      (add-card! start-slot top-card)))
; 	(if (not (is-visible? (get-top-card start-slot)))
; 	    (flip-top-card start-slot))
; 	(if (= (list-length (get-cards 10)) 1)
;	    (flip-top-card 10)))))

(define (button-released start-slot card-list end-slot)
  (if (or (= start-slot end-slot)
	  (and (> (list-length card-list) 1)
	       (not (or (= end-slot 2)
			(= end-slot 3)
			(= end-slot 4)
			(= end-slot 5))))
	  (= end-slot 0)
	  (= end-slot 1)
	  (= end-slot 10))
      #f
      (cond ((and (or (= end-slot 2)
		      (= end-slot 3)
		      (= end-slot 4)
		      (= end-slot 5))
		  (or (and (= (get-value (car card-list))
			      BASE-VAL)
			   (empty-slot? end-slot))
		      (and (not (empty-slot? end-slot))
			   (eq? (get-suit (car card-list))
				(get-suit (get-top-card end-slot)))
			   (or (= (get-value (car card-list))
				  (+ 1 (get-value (get-top-card end-slot))))
			       (and (= (get-value (car card-list)) ace)
				    (= (get-value (get-top-card end-slot)) king))))))
	     (complete-transaction start-slot (reverse card-list) end-slot))
	    ((and (not (empty-slot? end-slot))
		  (< (+ (list-length card-list) 
			(list-length (get-cards end-slot))) 
		     4)
		  (eq? (get-suit (car card-list))
		   (get-suit (get-top-card end-slot)))
		  (or (= (+ 1 (get-value (car (reverse card-list))))
			 (get-value (get-top-card end-slot)))
		      (and (= (get-value (car (reverse card-list))) king)
			   (= (get-value (get-top-card end-slot)) ace))))
	     (complete-transaction start-slot card-list end-slot))
	    ((and (empty-slot? end-slot)
		  (not (or (= end-slot 2)
			   (= end-slot 3)
			   (= end-slot 4)
			   (= end-slot 5))))
	     (complete-transaction start-slot card-list end-slot))
	    (#t #f))))

(define (flip-cards-back)
  (if (> FLIP-COUNTER 2)
      #f
      (if (empty-slot? 1)
	  #f
	  (begin
	    (add-card! 0 (flip-card (remove-card 1)))
	    (flip-cards-back)))))

(define (button-clicked slot-id)
  (if (= slot-id 0)
      (if (empty-slot? 0)
	  (begin
	    (flip-cards-back)
	    (set! FLIP-COUNTER (+ 1 FLIP-COUNTER)))
	  (let ((top-card (remove-card 0)))
	    (if (eq? top-card '())
		#f
		(add-card! 1 (flip-card top-card)))))
      #f))

(define (button-double-clicked slot)
  (if (and (not (empty-slot? slot))
	   (is-visible? (get-top-card slot))
	   (or (= slot 1)
	       (and (> slot 5)
		    (< slot 10))
	       (and (> slot 10))))
      (cond ((and (= BASE-VAL (get-value (get-top-card slot))))
	     (cond ((empty-slot? 2)
		    (deal-cards slot '(2)))
		   ((empty-slot? 3)
		    (deal-cards slot '(3)))
		   ((empty-slot? 4)
		    (deal-cards slot '(4)))
		   (#t
		    (deal-cards slot '(5)))))
	    ((and (not (empty-slot? 2))
		  (= (get-suit (get-top-card slot))
		     (get-suit (get-top-card 2))))
	     (if (or (and (= (get-value (get-top-card slot)) ace)
			  (= (get-value (get-top-card 2)) king))
		     (= (get-value (get-top-card slot))
			(+ 1 (get-value (get-top-card 2)))))
		 (deal-cards slot '(2))
		 #f))
	    ((and (not (empty-slot? 3))
		  (= (get-suit (get-top-card slot))
		     (get-suit (get-top-card 3))))
	     (if (or (and (= (get-value (get-top-card slot)) ace)
			  (= (get-value (get-top-card 3)) king))
		     (= (get-value (get-top-card slot))
			(+ 1 (get-value (get-top-card 3)))))
		 (deal-cards slot '(3))
		 #f))
	    ((and (not (empty-slot? 4))
		  (= (get-suit (get-top-card slot))
		     (get-suit (get-top-card 4))))
	     (if (or (and (= (get-value (get-top-card slot)) ace)
			  (= (get-value (get-top-card 4)) king))
		     (= (get-value (get-top-card slot))
			(+ 1 (get-value (get-top-card 4)))))
		 (deal-cards slot '(4))
		 #f))
	    ((and (not (empty-slot? 5))
		  (= (get-suit (get-top-card slot))
		     (get-suit (get-top-card 5))))
	     (if (or (and (= (get-value (get-top-card slot)) ace)
			  (= (get-value (get-top-card 5)) king))
		     (= (get-value (get-top-card slot))
			(+ 1 (get-value (get-top-card 5)))))
		 (deal-cards slot '(5))
		 #f))
	    (#t #f))
      #f)
  (if (and (> slot 5)
	   (not (= slot 10))
	   (empty-slot? slot)
	   (not (empty-slot? 10)))
      (begin 
	(cond ((= slot 6)
	       (deal-cards 10 '(6)))
	      ((= slot 7)
	       (deal-cards 10 '(7)))
	      ((= slot 8)
	       (deal-cards 10 '(8)))
	      ((= slot 9)
	       (deal-cards 10 '(9)))
	      ((= slot 11)
	       (deal-cards 10 '(11)))
	      ((= slot 12)
	       (deal-cards 10 '(12)))
	      ((= slot 13)
	       (deal-cards 10 '(13)))
	      ((= slot 14)
	       (deal-cards 10 '(14)))
	      (#t #t))
	(if (not (is-visible? (get-top-card slot)))
	    (flip-top-card slot)))))
	      
	    

(define (game-over borp)
  (not (game-won borp)))

(define (game-won borp)
  (and (empty-slot? 0)
       (empty-slot? 1)
       (empty-slot? 6)
       (empty-slot? 7)
       (empty-slot? 8)
       (empty-slot? 9)
       (empty-slot? 10)
       (empty-slot? 11)
       (empty-slot? 12)
       (empty-slot? 13)
       (empty-slot? 14)))

(define (get-hint borp)
  #f)

(set-lambda new-game button-pressed button-released button-clicked button-double-clicked game-over game-won get-hint)
