nboxes = 9
clues = 28

def make_puzzle_by_boxes (skew_by=0.0,
                          max_squares=None,):
    """Make a puzzle paying attention to evenness of clue
    distribution.
    
    If skew_by is 0, we distribute our clues as evenly as possible
    across boxes.  If skew by is 1.0, we make the distribution of
    clues as uneven as possible. In other words, if we had 27
    boxes for a 9x9 grid, a skew_by of 0 would put exactly 3 clues
    in each 3x3 grid whereas a skew_by of 1.0 would completely
    fill 3 3x3 grids with clues.

    We believe this skewing may have something to do with how
    difficult a puzzle is to solve. By toying with the ratios,
    this method may make it considerably easier to generate
    difficult or easy puzzles.
        """
    #nboxes = 9
    avg_clues = clues / nboxes
    extras = clues % nboxes
    if not max_squares:
        max_squares = avg_clues
        #if extras: max_squares += 1
        max_squares += int((nboxes-max_squares)*skew_by)
    clued = 0
    nclues = []
    print max_squares
    for n in range(nboxes):
        minimum = (clues-clued)/(nboxes-n)
        if max_squares < minimum:
            cls = minimum
        else:
            cls = int(max_squares)
        if cls > (clues - clued):
            print 'Finishing up.'
            cls = clues - clued
        nclues.append(cls)
        clued += cls
        if skew_by:
            max_squares = round(max_squares * skew_by)
    print nclues
    
